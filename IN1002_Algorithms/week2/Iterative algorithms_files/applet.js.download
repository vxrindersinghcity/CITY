"use strict";
var ColourScheme = {
    done: "#ddd",
    highlight: "#ff0",
    plain: "white"
};
var Applet = (function () {
    function Applet(name, bgColour) {
        if (bgColour === void 0) { bgColour = "white"; }
        this.canvas = document.getElementById(name);
        this.bgColour = bgColour;
    }
    Applet.prototype.hideshow = function () {
        hideshow(this.canvas);
    };
    Applet.prototype.background = function () {
        var ctx = this.canvas.getContext("2d");
        var width = this.canvas.offsetWidth;
        var height = this.canvas.offsetHeight;
        ctx.fillStyle = this.bgColour;
        ctx.fillRect(0, 0, width, height);
    };
    Applet.prototype.listenMousedown = function () {
        var self = this;
        this.canvas.addEventListener("mousedown", function (e) {
            var x = getMouseX(e) - self.canvas.offsetLeft;
            var y = getMouseY(e) - self.canvas.offsetTop;
            self.mousedown(x, y);
        });
    };
    Applet.prototype.mousedown = function (x, y) { };
    return Applet;
}());
if (!Math.sign) {
    Math.sign = function (x) { return x < 0 ? -1 : x > 0 ? 1 : 0; };
}
if (!Number.isInteger) {
    Number.isInteger = function (x) {
        return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
    };
}
function hideshow(obj) {
    obj.style.display = obj.style.display === 'none' ? 'block' : 'none';
}
function getRadioButton(name) {
    var radios = document.getElementsByName(name);
    var length = radios.length;
    for (var i = 0; i < length; i++)
        if (radios[i].checked)
            return radios[i];
    return radios[0];
}
function getMouseX(event) {
    if (event.x !== undefined)
        return event.x;
    return event.clientX + document.body.scrollLeft +
        document.documentElement.scrollLeft;
}
function getMouseY(event) {
    if (event.y !== undefined)
        return event.y;
    return event.clientY + document.body.scrollTop +
        document.documentElement.scrollTop;
}
var ArrayUtilities;
(function (ArrayUtilities) {
    function shuffle(arr) {
        var n = arr.length;
        for (var i = 0; i < n; i++) {
            var j = i + Math.floor(Math.random() * (n - i));
            if (j !== i)
                swap(arr, i, j);
        }
    }
    ArrayUtilities.shuffle = shuffle;
    function swap(arr, i, j) {
        var tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
    ArrayUtilities.swap = swap;
    function move(arr, from, to) {
        var step = Math.sign(to - from);
        if (step !== 0) {
            var tmp = arr[from];
            for (var i = from; i !== to; i = i + step)
                arr[i] = arr[i + step];
            arr[to] = tmp;
        }
    }
    ArrayUtilities.move = move;
    function partition(arr, pos, lo, hi) {
        var pivot = arr[pos];
        swap(arr, lo, pos);
        var i = lo + 1;
        var j = hi;
        while (i <= j) {
            while (i <= j && arr[i] <= pivot)
                i++;
            while (j >= i && arr[j] >= pivot)
                j--;
            if (i < j) {
                swap(arr, i, j);
                i++;
                j--;
            }
        }
        swap(arr, lo, j);
        return j;
    }
    ArrayUtilities.partition = partition;
})(ArrayUtilities || (ArrayUtilities = {}));
var swap = ArrayUtilities.swap;
var move = ArrayUtilities.move;
